openapi: 3.0.0
info:
  description: "API example (books)"
  version: "1.0.0"
  title: BooksAPI
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/Carsick/Books/1.0.0
  - url: 'https://petstore.swagger.io/v2'
tags:
  - name: book
    description: Everything about Books
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
paths:
  /book:
    get:
      tags:
        - book
      summary: Example for parameters
      description: Multiple status values can be provided with comma separated strings
      operationId: getBook
      parameters:
        - name: author
          in: query
          description: Author of the book
          required: true
          schema:
            type: string
        - name: title
          in: query
          description: Title of the book
          required: true
          schema:
            type: string
        - name: publisher
          in: query
          description: Publisher of the book
          required: false
          schema:
            type: string
        - name: isbn
          in: query
          description: ISBN of the book
          # regular expression
          required: false
          schema:
            type: string
            pattern: '^[0-9]*[-| ][0-9]*[-| ][0-9]*[-| ][0-9]*[-| ][0-9]*$'
        - name: genre
          in: query
          description: genre of the book
          required: false
          schema:
            type: string
            enum:
              - scienceFiction
              - fantasy
              - historical
        - name: numberOfPages
          in: query
          description: Number of pages of a book
          required: true
          schema:
            type: integer
            minimum: 1
            default: 100
            maximum: 200
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'

externalDocs:
  description: Find out more about Swagger
  url: 'http://swagger.io'
components:
  schemas:
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          format: int32
          description: User Status
      xml:
        name: User
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Pet:
      type: object
      required:
        - name
        - photoUrls
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: Pet
  requestBodies:
    Pet:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
      description: Pet object that needs to be added to the store
      required: true
    UserArray:
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      description: List of user object
      required: true
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://petstore.swagger.io/oauth/dialog'
          scopes:
            'write:pets': modify pets in your account
            'read:pets': read your pets